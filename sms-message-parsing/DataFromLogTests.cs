using System;
using System.IO;
using System.Text;
using System.Xml;
using NUnit.Framework;

namespace Spikes.SMSMessageParsing
{
    internal class DataFromLogTests
    {
        private readonly byte[] Bytes =
        {
            0x3C,
            0x3F,
            0x78,
            0x6D,
            0x6C,
            0x20,
            0x76,
            0x65,
            0x72,
            0x73,
            0x69,
            0x6F,
            0x6E,
            0x3D,
            0x22,
            0x31,
            0x2E,
            0x30,
            0x22,
            0x20,
            0x65,
            0x6E,
            0x63,
            0x6F,
            0x64,
            0x69,
            0x6E,
            0x67,
            0x3D,
            0x22,
            0x55,
            0x54,
            0x46,
            0x2D,
            0x38,
            0x22,
            0x20,
            0x73,
            0x74,
            0x61,
            0x6E,
            0x64,
            0x61,
            0x6C,
            0x6F,
            0x6E,
            0x65,
            0x3D,
            0x22,
            0x79,
            0x65,
            0x73,
            0x22,
            0x3F,
            0x3E,
            0x3C,
            0x72,
            0x65,
            0x71,
            0x75,
            0x65,
            0x73,
            0x74,
            0x20,
            0x74,
            0x79,
            0x70,
            0x65,
            0x3D,
            0x22,
            0x4D,
            0x45,
            0x53,
            0x53,
            0x41,
            0x47,
            0x45,
            0x22,
            0x3E,
            0x3C,
            0x6D,
            0x65,
            0x73,
            0x73,
            0x61,
            0x67,
            0x65,
            0x20,
            0x69,
            0x64,
            0x3D,
            0x22,
            0x35,
            0x38,
            0x34,
            0x62,
            0x61,
            0x33,
            0x32,
            0x36,
            0x2D,
            0x38,
            0x63,
            0x37,
            0x61,
            0x2D,
            0x34,
            0x38,
            0x33,
            0x38,
            0x2D,
            0x61,
            0x32,
            0x66,
            0x66,
            0x2D,
            0x39,
            0x39,
            0x63,
            0x37,
            0x30,
            0x31,
            0x65,
            0x31,
            0x33,
            0x66,
            0x65,
            0x39,
            0x22,
            0x3E,
            0x3C,
            0x72,
            0x65,
            0x63,
            0x69,
            0x70,
            0x69,
            0x65,
            0x6E,
            0x74,
            0x3E,
            0x3C,
            0x69,
            0x64,
            0x3E,
            0x33,
            0x36,
            0x38,
            0x37,
            0x38,
            0x3C,
            0x2F,
            0x69,
            0x64,
            0x3E,
            0x3C,
            0x74,
            0x79,
            0x70,
            0x65,
            0x3E,
            0x36,
            0x3C,
            0x2F,
            0x74,
            0x79,
            0x70,
            0x65,
            0x3E,
            0x3C,
            0x2F,
            0x72,
            0x65,
            0x63,
            0x69,
            0x70,
            0x69,
            0x65,
            0x6E,
            0x74,
            0x3E,
            0x3C,
            0x73,
            0x65,
            0x6E,
            0x64,
            0x65,
            0x72,
            0x3E,
            0x3C,
            0x69,
            0x64,
            0x3E,
            0x2B,
            0x31,
            0x38,
            0x31,
            0x38,
            0x33,
            0x38,
            0x33,
            0x35,
            0x37,
            0x37,
            0x34,
            0x3C,
            0x2F,
            0x69,
            0x64,
            0x3E,
            0x3C,
            0x70,
            0x72,
            0x6F,
            0x70,
            0x65,
            0x72,
            0x74,
            0x79,
            0x3E,
            0x3C,
            0x6E,
            0x61,
            0x6D,
            0x65,
            0x3E,
            0x43,
            0x41,
            0x52,
            0x52,
            0x49,
            0x45,
            0x52,
            0x3C,
            0x2F,
            0x6E,
            0x61,
            0x6D,
            0x65,
            0x3E,
            0x3C,
            0x76,
            0x61,
            0x6C,
            0x75,
            0x65,
            0x3E,
            0x34,
            0x3C,
            0x2F,
            0x76,
            0x61,
            0x6C,
            0x75,
            0x65,
            0x3E,
            0x3C,
            0x2F,
            0x70,
            0x72,
            0x6F,
            0x70,
            0x65,
            0x72,
            0x74,
            0x79,
            0x3E,
            0x3C,
            0x74,
            0x79,
            0x70,
            0x65,
            0x3E,
            0x35,
            0x3C,
            0x2F,
            0x74,
            0x79,
            0x70,
            0x65,
            0x3E,
            0x3C,
            0x2F,
            0x73,
            0x65,
            0x6E,
            0x64,
            0x65,
            0x72,
            0x3E,
            0x3C,
            0x74,
            0x65,
            0x78,
            0x74,
            0x3E,
            0x00,
            0x43,
            0x00,
            0x20,
            0xC3,
            0x98,
            0x3D,
            0xC3,
            0x9E,
            0x1C,
            0x3C,
            0x2F,
            0x74,
            0x65,
            0x78,
            0x74,
            0x3E,
            0x3C,
            0x2F,
            0x6D,
            0x65,
            0x73,
            0x73,
            0x61,
            0x67,
            0x65,
            0x3E,
            0x3C,
            0x2F,
            0x72,
            0x65,
            0x71,
            0x75,
            0x65,
            0x73,
            0x74,
            0x3E
        };

        [Test]
        public void ShouldDecodeUtf8Bytes()
        {
            Print(Bytes);

            using (var reader = new StreamReader(new MemoryStream(Bytes)))
            {
                var readToEnd = reader.ReadToEnd();
                Console.WriteLine(readToEnd);
                var document = new XmlDocument();
                document.LoadXml(readToEnd);
            }
        }

        [Test]
        public void ShouldDecodeUnicodeBytes()
        {
            Print(Bytes);

            using (var reader = new StreamReader(new MemoryStream(Bytes), Encoding.Unicode))
            {
                var readToEnd = reader.ReadToEnd();
                Console.WriteLine(readToEnd);
                var document = new XmlDocument();
                document.LoadXml(readToEnd);
            }
        }

        [Test]
        public void ShouldDecodeLatin1Bytes()
        {
            Print(Bytes);

            using (var reader = new StreamReader(new MemoryStream(Bytes), Encoding.GetEncoding("iso-8859-1")))
            {
                var readToEnd = reader.ReadToEnd();
                Console.WriteLine(readToEnd);

                var document = new XmlDocument();
                document.LoadXml(readToEnd);
            }
        }

        [Test]
        public void ShouldPrintBytesAsString()
        {
            var bytes = new byte[]
            {
                0x00,
                0x43,
                0x00,
                0x20,
                0xC3,
                0x98,
                0x3D,
                0xC3,
                0x9E,
                0x1C
            };

            Print(bytes);


            var stream = new MemoryStream(bytes);
            using (var reader = new StreamReader(stream, Encoding.BigEndianUnicode, false))
            {
                var s = reader.ReadToEnd();
                Console.WriteLine(s);
            }

            Console.WriteLine("\uC398\u3DC3\u9E1C");
            Console.WriteLine("\u98C3\uC33D\u1C9E");
            Console.WriteLine("\uD83D\uDC4B");
        }

        private void Print(byte[] data)
        {
            foreach (var b in data)
            {
                Console.WriteLine("{0:X2}: {1}", b, (char) b);
            }
        }
    }
}